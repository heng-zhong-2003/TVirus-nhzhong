data List a = Nil() | Cons(a, List a)

let map = \f, l. match l with
    | Nil() -> Nil()
    | Cons(x, xs) -> Cons(f(x), map(f, xs))

let reverseAppend = \l1, l2. match l1 with
    | Nil() -> l2
    | Cons(a, l) -> reverseAppend(l, Cons(a, l2))

let reverse = \l. reverseAppend(l, Nil())

let length = \l. match l with
    | Nil() -> 0
    | Cons(x, xs) -> length(xs) + 1

let foldl = \f, z, l. match l with
    | Nil() -> z
    | Cons(x, xs) -> foldl(f, f(z, x), xs)
