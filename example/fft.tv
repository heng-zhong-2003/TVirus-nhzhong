data Vector = Empty() | Leaf(Int) | Branch(Int, Vector, Vector, Vector, Vector)

let length = \t . match t with
| Empty()               -> 0
| Leaf(_)               -> 1
| Branch(n, _, _, _, _) -> n

let buildAux = \f, l, r .
  if (l > r) { Empty() }
  else {
    if (l == r) { Leaf(f(l)) }
    else {
      let n = r - l + 1 in
      let d = n % 4 in
      let s = n / 4 in
      let s1 = s + if (d >= 1) { 1 } else { 0 } in
      let s2 = s + if (d >= 2) { 1 } else { 0 } in
      let s3 = s + if (d >= 3) { 1 } else { 0 }
      in Branch(
        n, 
        buildAux(f, l, l + s1 - 1), 
        buildAux(f, l + s1, l + s1 + s2 - 1),
        buildAux(f, l + s1 + s2, l + s1 + s2 + s3 - 1),
        buildAux(f, l + s1 + s2 + s3, r)
      )
    }
  }

let build = \f, n . buildAux(f, 0, n - 1)

let access = \t, x . match t with
| Leaf(a) -> a
| Branch(_, t1, t2, t3, t4) ->
  let s1 = length(t1) in
  let s2 = length(t2) in
  let s3 = length(t3)
  in if (x < s1) {
    access(t1, x)
  } else { if (x < (s1 + s2)) {
    access(t2, x - s1)
  } else { if (x < (s1 + s2 + s3)) {
    access(t3, x - s1 - s2)
  } else {
    access(t4, x - s1 - s2 - s3)
  } } }

let modify = \t, x, f . match t with
| Leaf(a) -> Leaf(f(a))
| Branch(n, t1, t2, t3, t4) ->
  let s1 = length(t1) in
  let s2 = length(t2) in
  let s3 = length(t3)
  in if (x < s1) {
    Branch(n, modify(t1, x, f), t2, t3, t4)
  } else { if (x < (s1 + s2)) {
    Branch(n, t1, modify(t2, x - s1, f), t3, t4)
  } else { if (x < (s1 + s2 + s3)) {
    Branch(n, t1, t2, modify(t3, x - s1 - s2, f), t4)
  } else {
    Branch(n, t1, t2, t3, modify(t4, x - s1 - s2 - s3, f))
  } } }


let modAdd = \a, b . (a + b) % 998244353

let modSub = \a, b . (a - b + 998244353) % 998244353

let modMul = \a, b . (a * b) % 998244353

let qkpow = \x, k . 
  if k == 0 {
    1
  } else {
    modMul(qkpow(x * x, k / 2), (
      if k % 2 == 1 { x } else { 1 }
    ))
  }

let inv = \x . qkpow(x, 998244353 - 2)


data SubVector = SubVector(Vector, Int, Int)

let toSub = \t . SubVector(t, 1, 0)

let getEven = \t . match t with
| SubVector(v, a, b) -> SubVector(v, 2 * a, 2 * b)

let getOdd = \t . match t with
| SubVector(v, a, b) -> SubVector(v, 2 * a, 2 * b + 1)

let subAccess = \t, x . match t with
| SubVector(v, a, b) -> access(v, a * x + b)

let DFT = \v, n, rev . 
  if n == 1 {
    v
  } else {
    let g = DFT(getEven(v), n / 2, rev),
        h = DFT(getOdd(v), n / 2, rev),
        gn = qkpow(3, (998244353 - 1) / n)
    in toSub(build(\k . 
      if k < n / 2 {
        modAdd(subAccess(g, k), modMul(qkpow(gn, k), subAccess(h, k)))
      } else {
        modSub(subAccess(g, k), modMul(qkpow(gn, k), subAccess(h, k)))
      }
     n))
  }

let main = 42
