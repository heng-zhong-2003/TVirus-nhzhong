let modAdd = \a, b . ((a + b) % 998244353)

let modSub = \a, b . (((a - b) + 998244353) % 998244353)

let modMul = \a, b . ((a * b) % 998244353)

let qkpow = \x, k . 
  if k == 0 {
    1
  } else {
    if (k % 2) == 1 {
      modMul(qkpow(modMul(x, x), k / 2), x)
    } else {
      qkpow(modMul(x, x), k / 2)
    }
  }

let inv = \x . qkpow(x, 998244353 - 2)

let modDiv = \a, b . modMul(a, inv(b))


data SubVector = MkSubVector(Vector, Int, Int)

let toSub = \t . MkSubVector(t, 1, 0)

let fromSub = \s . match s with
| MkSubVector(v, a, b) -> v

let getEven = \t . match t with
| MkSubVector(v, a, b) -> MkSubVector(v, 2 * a, b)

let getOdd = \t . match t with
| MkSubVector(v, a, b) -> MkSubVector(v, 2 * a, a + b)

let subAccess = \t, x . match t with
| MkSubVector(v, a, b) -> vec_access(v, (a * x) + b)

let DFTAux = \v, n, rev . 
  if n == 1 {
    v
  } else {
    let g = DFTAux(getEven(v), n / 2, rev),
        h = DFTAux(getOdd(v), n / 2, rev),
        gi = if rev { inv(3) } else { 3 },
        gn = qkpow(gi, (998244353 - 1) / n)
    in toSub(vec_build(\k . (
      if k < (n / 2) {
        modAdd(subAccess(g, k), modMul(qkpow(gn, k), subAccess(h, k)))
      } else {
        let t = k - (n / 2) in 
        modSub(subAccess(g, t), modMul(qkpow(gn, t), subAccess(h, t)))
      })
    , n))
  }

let DFT = \v, rev . 
  let n = vec_length(v),
      inv_n = inv(n),
      result = fromSub(DFTAux(toSub(v), n, rev))
  in if rev {
    vec_map(result, \x . modMul(x, inv_n))
  } else {
    result
  }

let toNum = \v . match v with
| Empty() -> 0
| Leaf(x) -> x
| Branch(_, v1, v2, v3, v4) -> 
  let combNum = (\r, v .
    let ln = vec_length(v)
    in modAdd(modMul(r, qkpow(10, ln)), toNum(v))
  ) in
  combNum(combNum(combNum(combNum(0, v4), v3), v2), v1)

let main = 
  let v1 = vec_build(\i . (4 - i), 4) in
  let v2 = vec_build(\i . (i * 2), 4) in
  let fv1 = DFT(vec_resize(v1, 8), False) in
  let fv2 = DFT(vec_resize(v2, 8), False) in
  let fresult = vec_zipWith(fv1, fv2, modMul) in
  let result = DFT(fresult, True)
  in toNum(result)
