data Vector = Empty() | Leaf(Int) | Branch(Int, Vector, Vector, Vector, Vector)

let vector_length = \t . match t with
| Empty()               -> 0
| Leaf(_)               -> 1
| Branch(n, _, _, _, _) -> n

let buildAux = \f, l, r .
  if (l > r) { Empty() }
  else {
    if (l == r) { Leaf(f(l)) }
    else {
      let n = r - l + 1 in
      let d = n % 4 in
      let s = n / 4 in
      let s1 = s + if (d >= 1) { 1 } else { 0 } in
      let s2 = s + if (d >= 2) { 1 } else { 0 } in
      let s3 = s + if (d >= 3) { 1 } else { 0 }
      in Branch(
        n, 
        buildAux(f, l, l + s1 - 1), 
        buildAux(f, l + s1, l + s1 + s2 - 1),
        buildAux(f, l + s1 + s2, l + s1 + s2 + s3 - 1),
        buildAux(f, l + s1 + s2 + s3, r)
      )
    }
  }

let build = \f, n . buildAux(f, 0, n - 1)

let access = \t, x . match t with
| Leaf(a) -> a
| Branch(_, t1, t2, t3, t4) ->
  let s1 = vector_length(t1) in
  let s2 = vector_length(t2) in
  let s3 = vector_length(t3)
  in if (x < s1) {
    access(t1, x)
  } else { if (x < (s1 + s2)) {
    access(t2, x - s1)
  } else { if (x < (s1 + s2 + s3)) {
    access(t3, x - s1 - s2)
  } else {
    access(t4, x - s1 - s2 - s3)
  } } }

let modify = \t, x, f . match t with
| Leaf(a) -> Leaf(f(a))
| Branch(n, t1, t2, t3, t4) ->
  let s1 = vector_length(t1) in
  let s2 = vector_length(t2) in
  let s3 = vector_length(t3)
  in if (x < s1) {
    Branch(n, modify(t1, x, f), t2, t3, t4)
  } else { if (x < (s1 + s2)) {
    Branch(n, t1, modify(t2, x - s1, f), t3, t4)
  } else { if (x < (s1 + s2 + s3)) {
    Branch(n, t1, t2, modify(t3, x - s1 - s2, f), t4)
  } else {
    Branch(n, t1, t2, t3, modify(t4, x - s1 - s2 - s3, f))
  } } }

let main = 
  let vec = build(\x . x, 1000) in
  let newVec = modify(vec, 100, \x . (x + access(vec, 2)))
  in access(newVec, 100)