let listdivide = \l, i.
    if (i == 0) {
        P(Nil(), l)
    } else {
        match l with
            | Cons(x, xs) -> (match listdivide(xs, i - 1) with
                                | P(a, b) -> P(Cons(x, a), b))
            | Nil() -> P(Nil(), Nil())
    }

let merge = \a, b. match a with
    | Nil() -> b
    | Cons(aa, as) -> match b with
                        | Nil() -> a
                        | Cons(ba, bs) -> if aa < ba {
                                              Cons(aa, merge(as, b))
                                          } else {
                                              Cons(ba, merge(a, bs))
                                          }

let reducehalf = \f, l. match l with
    | Nil() -> Nil()
    | Cons(x, Nil()) -> x
    | Cons(x, xs) -> match listdivide(l, length(l) / 2) with
                        | P(a, b) -> f(reducehalf(f, a), reducehalf(f, b))

let mergesort = \l. reducehalf(merge, map(list1, l))

let main = mergesort(repeat(1, 20000))
